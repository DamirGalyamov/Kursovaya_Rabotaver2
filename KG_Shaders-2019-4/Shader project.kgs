<?xml version="1.0" encoding="utf-8"?>
<project vert=" varying vec2 texCoord;&#xD; varying vec3 Normal;&#xD; layout (location = 1) in vec3 aPos;&#xD;layout (location = 2) in vec3 aNormal;&#xD;layout (location = 3) in vec2 aTexCoords;&#xD;layout (location = 4) in vec3 aTangent;&#xD;layout (location = 5) in vec3 aBitangent;&#xD;&#xD;out VS_OUT {&#xD;    vec3 FragPos;&#xD;    vec2 TexCoords;&#xD;    vec3 TangentLightPos;&#xD;    vec3 TangentViewPos;&#xD;    vec3 TangentFragPos;&#xD;} vs_out;&#xD;&#xD;uniform mat4 projection;&#xD;uniform mat4 view;&#xD;uniform mat4 model;&#xD;&#xD;uniform vec3 lightPos;&#xD;uniform vec3 viewPos;&#xD;&#xD;void main(void)&#xD;{&#xD;    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   &#xD;    vs_out.TexCoords = gl_MultiTexCoord0.xy;&#xD;    &#xD;    mat3 normalMatrix = transpose(inverse(mat3(model)));&#xD;    vec3 T = normalize(normalMatrix * aTangent);&#xD;    vec3 N = normalize(normalMatrix * aNormal);&#xD;    T = normalize(T - dot(T, N) * N);&#xD;    vec3 B = cross(N, T);&#xD;    &#xD;    mat3 TBN = transpose(mat3(T, B, N));    &#xD;    vs_out.TangentLightPos = TBN * lightPos;&#xD;    vs_out.TangentViewPos  = TBN * viewPos;&#xD;    vs_out.TangentFragPos  = TBN * vs_out.FragPos;&#xD; &#x9;  &#xD;    gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix*gl_Vertex;&#xD;    //gl_Position = projection * view * model * vec4(aPos, 1.0);&#xD;    texCoord = gl_MultiTexCoord0.xy;&#xD;    Normal = normalize(gl_Normal);&#xD; }" pix=" #version 330 core&#xD; varying vec2 texCoord;&#xD; varying vec3 Normal;&#xD; uniform sampler2D iTexture0;&#xD; uniform sampler2D iTexture1;&#xD; uniform vec3 lightPos;&#xD; uniform vec3 viewPos;&#xD; //layout (location = 0) in vec3 aPos;&#xD; uniform mat4 model;&#xD; in VS_OUT {&#xD;    vec3 FragPos;&#xD;    vec2 TexCoords;&#xD;    vec3 TangentLightPos;&#xD;    vec3 TangentViewPos;&#xD;    vec3 TangentFragPos;&#xD;} fs_in;&#xD;&#xD;&#xD;&#xD; &#xD; void main(void)&#xD; {&#xD; &#x9;vec3 normal = texture2D(iTexture1,fs_in.TexCoords).rgb;&#xD;    // transform normal vector to range [-1,1]&#xD;    normal = normalize(normal * 2.0 - 1.0);  // this normal is in tangent space&#xD;   &#xD;    // get diffuse color&#xD;    vec3 color = texture2D(iTexture0,texCoord).rgb;&#xD;    // ambient&#xD;    vec3 ambient = 0.1 * color;&#xD;    // diffuse&#xD;    vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);&#xD;    float diff = max(dot(lightDir, normal), 0.0);&#xD;    vec3 diffuse = diff * color;&#xD;    // specular&#xD;    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);&#xD;    vec3 reflectDir = reflect(-lightDir, normal);&#xD;    vec3 halfwayDir = normalize(lightDir + viewDir);  &#xD;    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);&#xD;&#xD;    vec3 specular = vec3(0.2) * spec;&#xD;    gl_FragColor = vec4(color + normal, 1.0);&#xD;     //gl_FragColor = vec4(ambient + diffuse + specular, 1.0);&#xD; }&#xD; " tt0="1" t0="C:\Users\User\Downloads\brickwall.jpg" tt1="1" t1="C:\Users\User\Downloads\brickwall_normal.jpg" tt2="0" t2="" tt3="0" t3="" />